{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","onSubmitForm","e","preventDefault","formData","FormData","user","forEach","value","name","amount","console","log","delayUser","delay","stepUser","step","position","Number","i","Promise","resolve","reject","shouldResolve","Math","random","setInterval","createPromise","then","catch","addEventListener"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAKpC,SAASC,EAAaC,GAClBA,EAAEC,iBACIC,MAAAA,EAAW,IAAIC,SAASP,GAExBQ,EAAO,GACbF,EAASG,QAAQ,CAACC,EAAOC,KACrBH,EAAKG,GAAQD,IAGXE,MAAAA,EAASJ,EAAKI,OACpBC,QAAQC,IAAIF,GAENG,MAAAA,EAAYP,EAAKQ,MACvBH,QAAQC,IAAIC,GAENE,MAAAA,EAAWT,EAAKU,KACtBL,QAAQC,IAAIG,GAGRE,IAAAA,EAAW,GACXH,EAAQI,OAAOL,GACfG,EAAOE,OAAOH,GACb,IAAA,IAAII,EAAI,EAAGA,GAAKT,EAAQS,GAAK,EAAG,CACjCF,EAAWE,EAGXL,GAASE,EAIa,EAACC,EAAUH,IAEtB,IAAIM,QAAQ,CAACC,EAASC,KACnBC,MAAAA,EAAgBC,KAAKC,SAAW,GAEtCC,YAAY,KAGJH,GAEAF,EAAQ,CAAEJ,SAAAA,EAAUH,MAAAA,IAGxBQ,EAAO,CAAEL,SAAAA,EAAUH,MAAAA,KAEpBA,KAGXa,CAAc,EAAG,MACZC,KAAK,EAAGX,SAAAA,EAAUH,MAAAA,MACfH,QAAQC,2BAA2BK,QAAeH,SAErDe,MAAM,EAAGZ,SAAAA,EAAUH,MAAAA,MAChBH,QAAQC,0BAA0BK,QAAeH,UAvDjEhB,EAAKgC,iBAAiB,SAAU7B","file":"03-promises.c8409af7.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form');\n\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n    e.preventDefault();\n    const formData = new FormData(form);\n\n    const user = {};\n    formData.forEach((value, name) => {\n        user[name] = value;\n    });\n\n    const amount = user.amount;\n    console.log(amount);\n\n    const delayUser = user.delay;\n    console.log(delayUser);\n\n    const stepUser = user.step;\n    console.log(stepUser);\n\n\n    let position = '';\n    let delay = Number(delayUser);\n    let step = Number(stepUser);\n    for (let i = 1; i <= amount; i += 1) {\n        position = i;\n\n\n        delay += step\n\n\n\n        const createPromise = (position, delay) => {\n\n            return new Promise((resolve, reject) => {\n                const shouldResolve = Math.random() > 0.3;\n\n                setInterval(() => {\n\n\n                    if (shouldResolve) {\n                        // Fulfill \n                        resolve({ position, delay });\n                    }\n                    // Reject\n                    reject({ position, delay });\n\n                }, delay)\n            });\n        };\n        createPromise(2, 1500)\n            .then(({ position, delay }) => {\n                console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n            })\n            .catch(({ position, delay }) => {\n                console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n            });\n\n    }\n}"]}